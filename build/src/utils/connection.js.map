{"version":3,"file":"connection.js","sourceRoot":"","sources":["../../../src/utils/connection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAA0D;AAE1D,IAAM,UAAU,GAAG;IACX,MAAM;;;;4BACV,qBAAM,0BAAgB,EAAE,EAAA;;wBAAxB,SAAwB,CAAC;;;;;KAC1B;IAEK,KAAK;;;;4BACT,qBAAM,uBAAa,EAAE,CAAC,KAAK,EAAE,EAAA;;wBAA7B,SAA6B,CAAC;;;;;KAC/B;IAEK,KAAK;;;;;;wBACH,UAAU,GAAG,uBAAa,EAAE,CAAC;wBAC7B,QAAQ,GAAG,UAAU,CAAC,eAAe,CAAC;;;;8BAGb,EAAR,qBAAQ;;;6BAAR,CAAA,sBAAQ,CAAA;wBAAlB,MAAM;wBACI,qBAAM,UAAU,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,EAAA;;wBAAxD,UAAU,GAAG,SAA2C;wBAC9D,qBAAM,UAAU,CAAC,KAAK,CAAC,mBAAgB,MAAM,CAAC,SAAS,QAAI,CAAC,EAAA;;wBAA5D,SAA4D,CAAC;;;wBAF1C,IAAQ,CAAA;;;;;wBAK7B,MAAM,IAAI,KAAK,CAAC,8BAA4B,OAAO,CAAC,CAAC;;;;;KAExD;CACF,CAAC;AACF,kBAAe,UAAU,CAAC","sourcesContent":["import { createConnection, getConnection } from \"typeorm\";\n\nconst connection = {\n  async create() {\n    await createConnection();\n  },\n\n  async close() {\n    await getConnection().close();\n  },\n\n  async clear() {\n    const connection = getConnection();\n    const entities = connection.entityMetadatas;\n\n    try {\n      for (const entity of entities) {\n        const repository = await connection.getRepository(entity.name);\n        await repository.query(`DELETE FROM \"${entity.tableName}\";`);\n      }\n    } catch (error) {\n      throw new Error(`ERROR: Cleaning test db: ${error}`);\n    }\n  },\n};\nexport default connection;\n"]}