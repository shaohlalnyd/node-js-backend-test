{"version":3,"file":"category.controller.js","sourceRoot":"","sources":["../../../src/controllers/category.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import express, {Request, Response} from \"express\";\r\nimport {body, validationResult} from \"express-validator\";\r\nimport {CategoryCreateDto, CategoryReadDto, CategorySummeryReadDto, CategoryUpdateDto} from \"../dtos/category.dto\";\r\nimport CategoryService from \"../services/category.service\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/get-all\", async (req: Request, res: Response, next) => {\r\n    const categoryName: string = req.query.categoryName as string || \"\";\r\n    const result: CategorySummeryReadDto[] = await CategoryService.findAll(categoryName);\r\n    res.json(result);\r\n});\r\n\r\nrouter.get(\"/get-one-by-id/:id\", async (req: Request, res: Response, next) => {\r\n    try {\r\n        const id = Number(req.params.id as string);\r\n        const result: CategoryReadDto = await CategoryService.GetOneById(id);\r\n        res.json(result);\r\n    } catch (e) {\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.post(\"/add-new\",\r\n    body(\"category\").not().isEmpty(),\r\n    body(\"counter\").not().isEmpty(),\r\n    body(\"latitude\").not().isEmpty(),\r\n    body(\"longitude\").not().isEmpty(),\r\n    async (req, res, next) => {\r\n        try {\r\n            const errors = validationResult(req);\r\n            if (!errors.isEmpty()) {\r\n                return res.status(400).json({error: errors.array()});\r\n            }\r\n            const creatingModel: CategoryCreateDto = new CategoryCreateDto(req.body);\r\n            const result: CategoryReadDto = await CategoryService.CreateOne(creatingModel);\r\n            res.json(result);\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    });\r\n\r\nrouter.put(\"/update-one\", body(\"category\").not().isEmpty(),\r\n    body(\"counter\").not().isEmpty(),\r\n    body(\"latitude\").not().isEmpty(),\r\n    body(\"longitude\").not().isEmpty(),\r\n    body(\"id\").not().isEmpty(),\r\n    async (req, res, next) => {\r\n        try {\r\n            const errors = validationResult(req);\r\n            if (!errors.isEmpty()) {\r\n                return res.status(400).json({error: errors.array()});\r\n            }\r\n            const updatingModel: CategoryUpdateDto = new CategoryUpdateDto(req.body);\r\n            const result: CategoryReadDto = await CategoryService.UpdateOne(updatingModel);\r\n            res.json(result);\r\n        } catch (e) {\r\n            next(e);\r\n        }\r\n    }\r\n);\r\n\r\nrouter.delete(\"/remove-one/:id\", async (req, res, next) => {\r\n    const id = Number(req.params.id as string);\r\n    try {\r\n        const result = await CategoryService.RemoveOneById(id);\r\n        res.json(result);\r\n    } catch (e) {\r\n        next(e);\r\n    }\r\n})\r\n\r\nrouter.get(\"/get-pagination/:pageNumber/:pageSize\", async (req, res, next) => {\r\n    const pageNumber = Number(req.params.pageNumber as string);\r\n    const pageSize = Number(req.params.pageSize as string);\r\n\r\n    const categoryName: string = req.query.categoryName as string || \"\";\r\n\r\n    const result: CategorySummeryReadDto[] = await CategoryService.GetPagination(pageNumber, pageSize, categoryName);\r\n    res.json(result);\r\n\r\n});\r\n\r\nexport default router;\r\n"]}