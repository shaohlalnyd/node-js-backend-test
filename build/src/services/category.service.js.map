{"version":3,"file":"category.service.js","sourceRoot":"","sources":["../../../src/services/category.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {PrismaClient} from \"@prisma/client\";\r\nimport {CategoryCreateDto, CategoryReadDto, CategorySummeryReadDto, CategoryUpdateDto} from \"../dtos/category.dto\";\r\nimport {ErrorHandler} from \"../middlewares/error-middleware\";\r\nimport {Category} from \"../models/category.model\";\r\n\r\nconst prisma = new PrismaClient();\r\nconst categoryRepository = prisma.category;\r\n\r\nclass CategoryService {\r\n    public async findAll(categoryName: string) {\r\n        const categories: Category[] = await categoryRepository.findMany(\r\n            {\r\n                where: {\r\n                    category: {\r\n                        contains: categoryName,\r\n                    },\r\n                },\r\n            },\r\n        );\r\n\r\n        return categories.map((value) => {\r\n            return new CategorySummeryReadDto(value);\r\n        });\r\n    }\r\n\r\n    public async GetOneById(id: number) {\r\n        const category: Category = await categoryRepository.findUnique({\r\n            where: {\r\n                id,\r\n            },\r\n        });\r\n\r\n        if (!category) {\r\n            throw new ErrorHandler(404, \"category not found\");\r\n        }\r\n\r\n        return new CategoryReadDto(category);\r\n\r\n    }\r\n\r\n    public async CreateOne(input: CategoryCreateDto) {\r\n\r\n        const exitingCategory = await this.GetOneCategoryName(input.category);\r\n\r\n        if (exitingCategory) {\r\n            throw new ErrorHandler(403, \"category already exists\");\r\n        }\r\n\r\n        const creatingCategory = new Category(input);\r\n\r\n        const user = await categoryRepository.create({\r\n            data: creatingCategory,\r\n        });\r\n\r\n        return new CategoryReadDto(user);\r\n    }\r\n\r\n    public async UpdateOne(input: CategoryUpdateDto) {\r\n\r\n        let category: Category = await categoryRepository.findUnique({\r\n            where: {\r\n                id: input.id,\r\n            },\r\n        });\r\n\r\n        if (!category) {\r\n            throw new ErrorHandler(404, \"category not found\");\r\n        }\r\n\r\n        const categoryWithSameName = await this.GetOneCategoryName(input.category);\r\n\r\n        if (categoryWithSameName && categoryWithSameName.id !== input.id) {\r\n            throw new ErrorHandler(403, \"already exists a category with same name\");\r\n        }\r\n\r\n        category = new Category(input);\r\n\r\n        category = await categoryRepository.update({\r\n            data: category,\r\n            where: {\r\n                id: input.id,\r\n            },\r\n        });\r\n\r\n        return new CategoryReadDto(category);\r\n    }\r\n\r\n    public async RemoveOneById(id: number) {\r\n\r\n        await this.GetOneById(id);\r\n\r\n        const removingCategory = await categoryRepository.delete({\r\n            where: {\r\n                id,\r\n            },\r\n        });\r\n\r\n        return new CategoryReadDto(removingCategory);\r\n    }\r\n\r\n    public async GetPagination(pageNumber: number, pageSize: number, categoryName: string) {\r\n        const categories: CategorySummeryReadDto[] = await categoryRepository.findMany({\r\n            select: {\r\n                category: true,\r\n                id: true,\r\n            },\r\n            skip: (pageNumber - 1) * pageSize,\r\n            take: pageSize,\r\n            where: {\r\n                category: {\r\n                    contains: categoryName,\r\n                },\r\n            },\r\n        });\r\n\r\n        return categories;\r\n    }\r\n\r\n    private async GetOneCategoryName(name: string) {\r\n        const category: Category = await categoryRepository.findFirst({\r\n            where: {\r\n                category: name,\r\n            },\r\n        });\r\n        return category;\r\n    }\r\n}\r\n\r\nexport default new CategoryService();\r\n"]}