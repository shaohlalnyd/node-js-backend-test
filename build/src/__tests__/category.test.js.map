{"version":3,"file":"category.test.js","sourceRoot":"","sources":["../../../src/__tests__/category.test.ts"],"names":[],"mappings":"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","sourcesContent":["import bodyParser from \"body-parser\";\r\nimport express from \"express\";\r\nimport request from \"supertest\";\r\nimport categoryRouter from \"../controllers/category.controller\";\r\nimport {CategoryCreateDto} from \"../dtos/category.dto\";\r\n\r\nconst app = express();\r\napp.use(bodyParser.urlencoded({extended: false}));\r\napp.use(bodyParser.json());\r\napp.use(\"/category\", categoryRouter);\r\n\r\ntest(\"responds to /\", async () => {\r\n    const res = await request(app).get(\"/category/get-all\");\r\n    expect(res.header[\"content-type\"]).toBe(\"application/json; charset=utf-8\");\r\n    expect(res.statusCode).toBe(200);\r\n});\r\n\r\ntest(\"get-one-category-by-id-test-if-categories-exists-and-category-founded\", async () => {\r\n    const categoriesRes = await request(app).get(\"/category/get-all\");\r\n    const categories = categoriesRes.body;\r\n    const id = categories[0].id;\r\n    const res = await request(app).get(`/category/get-one-by-id/${id}`);\r\n    expect(res.header[\"content-type\"]).toBe(\"application/json; charset=utf-8\");\r\n    expect(res.statusCode).toBe(200);\r\n});\r\n\r\ntest(\"get one category by id test if categories exists and category not founded\", async () => {\r\n    const id = 1000;\r\n    const res = await request(app).get(`/category/get-one-by-id/${id}`);\r\n    expect(res.header[\"content-type\"]).toBe(\"text/html; charset=utf-8\");\r\n    expect(res.statusCode).toBe(404);\r\n});\r\n\r\ntest(\"add new category if not exists\", async () => {\r\n    const creatingCategory = new CategoryCreateDto({\r\n        category: Math.random().toString(36).slice(2),\r\n        longitude: 1,\r\n        latitude: 1,\r\n        counter: 1,\r\n    });\r\n    const res = await request(app).post(`/category/add-new`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(creatingCategory);\r\n    expect(res.header[\"content-type\"]).toBe(\"application/json; charset=utf-8\");\r\n    expect(res.statusCode).toBe(200);\r\n    await request(app).delete(`/category/remove-one/${res.body.id}`);\r\n});\r\n\r\ntest(\"add new category if  exists\", async () => {\r\n\r\n    const creatingCategory = new CategoryCreateDto({\r\n        category: Math.random().toString(36).slice(2),\r\n        longitude: 1,\r\n        latitude: 1,\r\n        counter: 1,\r\n    });\r\n    const creatingRes = await request(app).post(`/category/add-new`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(creatingCategory);\r\n\r\n    const res = await request(app).post(`/category/add-new`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(creatingRes.body);\r\n    expect(res.header[\"content-type\"]).toBe(\"text/html; charset=utf-8\");\r\n    expect(res.statusCode).toBe(403);\r\n    await request(app).delete(`/category/remove-one/${creatingRes.body.id}`);\r\n});\r\n\r\ntest(\"update category if correct\", async () => {\r\n    const creatingCategory = new CategoryCreateDto({\r\n        category: Math.random().toString(36).slice(2),\r\n        longitude: 1,\r\n        latitude: 1,\r\n        counter: 1,\r\n    });\r\n    const creatingRes = await request(app).post(`/category/add-new`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(creatingCategory);\r\n\r\n    const res = await request(app).put(`/category/update-one`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(creatingRes.body);\r\n    expect(res.header[\"content-type\"]).toBe(\"application/json; charset=utf-8\");\r\n    expect(res.statusCode).toBe(200);\r\n    await request(app).delete(`/category/remove-one/${creatingRes.body.id}`);\r\n});\r\n\r\ntest(\"update category if exists\", async () => {\r\n    const categoriesRes = await request(app).get(\"/category/get-all\");\r\n    const categories = categoriesRes.body;\r\n    const id = categories[0].id;\r\n    const oneCategory = await request(app).get(`/category/get-one-by-id/${id}`);\r\n\r\n    const creatingCategory = new CategoryCreateDto({\r\n        category: Math.random().toString(36).slice(2),\r\n        longitude: 1,\r\n        latitude: 1,\r\n        counter: 1,\r\n    });\r\n    const creatingRes = await request(app).post(`/category/add-new`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(creatingCategory);\r\n\r\n    const categoryCreated = creatingRes.body;\r\n    categoryCreated.category = oneCategory.body.category;\r\n\r\n\r\n    const res = await request(app).put(`/category/update-one`)\r\n        .set(\"Content-Type\", \"application/json\")\r\n        .send(categoryCreated);\r\n    expect(res.header[\"content-type\"]).toBe(\"text/html; charset=utf-8\");\r\n    expect(res.statusCode).toBe(403);\r\n    await request(app).delete(`/category/remove-one/${creatingRes.body.id}`);\r\n});\r\n"]}